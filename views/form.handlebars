<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Message Sender</title>
</head>

<body>
    <div id="login-form">
        <form id="login">
            <h1>Login</h1>
            <label for="username">Username:</label><br>
            <input type="text" id="username" name="username" required><br>
            <label for="password">Password:</label><br>
            <input type="password" id="password" name="password" required><br>
            <button type="submit">Login</button>
        </form>
    </div>

    <div id="qr-code-container" style="display:none;">
        <img id="qrcode" alt="QRCode" src="" height="350px"></img>
    </div>
    <div id="loading-mask" style="display:none;">
        <div class="spinner"></div>
        <p style="text-align: center;">Application is getting ready!<br>Please Wait...</p>
    </div>

    <form id="message-form" action="/send-message" method="post" enctype="multipart/form-data" style="display:none;">
        <h1>WhatsApp Message Sender</h1>
        <label for="message">Message:</label><br>
        <textarea id="message" name="message" rows="4" cols="50" required></textarea><br>
        <label for="attachment">Attachment:</label><br>
        <input type="file" id="attachment" name="attachment"><br>
        <label for="attachment-excel-type">Contact File Type:</label><br>
        <select id="attachment-excel-type" name="attachment-excel-type">
            <option value="none">None</option>
            <option value="manual">Manually</option>
            <option value="attachment">Attachment</option>
        </select><br>
        <div id="contact-manual" style="display:none;">
            <label for="contact-manual-input">Enter Contacts (one per line):</label><br>
            <textarea id="contact-manual-input" name="manualInput" rows="4" cols="50"></textarea><br>
        </div>
        <div id="contact-attachment" style="display:none;">
            <label for="attachment-excel">Upload Contact File:</label><br>
            <input type="file" id="attachment-excel" name="attachment-excel"><br>
        </div>
        <label for="minDelay">Minimum Delay (ms):</label><br>
        <input type="number" id="minDelay" name="minDelay" required><br>
        <label for="maxDelay">Maximum Delay (ms):</label><br>
        <input type="number" id="maxDelay" name="maxDelay" required><br>
        <button type="submit">Send Messages</button>
    </form>
    <button id="download-btn" style="display:none;">Download Contacts</button>
    <footer>Developed by @Elvin-Khunt</footer>

    <script>
        window.addEventListener('DOMContentLoaded', () => {
            const loginForm = document.getElementById('login');
            const messageForm = document.getElementById('message-form');
            const loadingMask = document.getElementById('loading-mask');
            const qrCodeContainer = document.getElementById('qr-code-container');
            const downloadBtn = document.getElementById('download-btn');

            loginForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(loginForm); // Use loginForm instead of this
                const token = sessionStorage.getItem('token');
                if (token) {
                    formData.append('token', token); // Append token to the form data
                }
                for (const [key, value] of formData.entries()) {
                    console.log(key, value); // Log form data to check if it's being captured correctly
                }
                const response = await fetch('/login', {
                    method: 'POST',
                    body: new URLSearchParams(formData)
                });
                const data = await response.json();
                if (response.ok) {
                    sessionStorage.setItem('token', data.token);
                    loginForm.style.display = 'none';
                    checkClientReady();
                } else {
                    alert(data.message);
                }
            });

            async function checkClientReady() {
                try {
                    const token = sessionStorage.getItem('token');
                    const response = await fetch('/client-status', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    const { ready, qr, qrData } = await response.json();
                    if (ready) {
                        loadingMask.style.display = 'none';
                        qrCodeContainer.style.display = 'none';
                        messageForm.style.display = 'block';
                        {{!-- downloadBtn.style.display = 'block'; --}}
                    } else if (qr) {
                        qrCodeContainer.style.display = 'flex';
                        if (qrData) {
                            await fetch('/qrcode', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${token}`
                                },
                                body: JSON.stringify({ data: qrData })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    const { imgData } = data;
                                    generateQRCode(imgData);
                                })
                                .catch(error => console.error('Error generating QR code:', error));
                        }
                        loadingMask.style.display = 'none';
                        setTimeout(checkClientReady, 5000);
                    } else {
                        qrCodeContainer.style.display = 'none';
                        loadingMask.style.display = 'flex';
                        setTimeout(checkClientReady, 5000);
                    }
                } catch (error) {
                    console.error('Error checking client status:', error);
                }
            }

            function generateQRCode(imgData) {
                const img = document.getElementById("qrcode");
                img.src = "data:image/svg+xml;base64," + imgData;
            }

            document.getElementById('attachment-excel-type').addEventListener('change', function () {
                const selectedValue = this.value;
                if (selectedValue === 'manual') {
                    document.getElementById('contact-manual').style.display = 'block';
                    document.getElementById('contact-attachment').style.display = 'none';
                } else if (selectedValue === 'attachment') {
                    document.getElementById('contact-manual').style.display = 'none';
                    document.getElementById('contact-attachment').style.display = 'block';
                } else {
                    document.getElementById('contact-manual').style.display = 'none';
                    document.getElementById('contact-attachment').style.display = 'none';
                }
            });

            downloadBtn.addEventListener('click', async () => {
                try {
                    const token = sessionStorage.getItem('token');
                    const response = await fetch('/save-contacts', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'contacts.xlsx';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                } catch (error) {
                    console.error('Error downloading contacts:', error);
                }
            });
        });
    </script>
</body>

</html>